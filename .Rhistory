relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
for (k in 1:n-1){
for (l in k:n){
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(bib)
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
i=1
author_list<-(bibtex[i]$author)
n=length(author_list)
k=1
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
for (k in 1:n-1){
for (l in k:n){
print("***")
print(i)
print(k)
print(l)
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(bib)
i=1
for (k in 1: 10) { print(k)}
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
for (k in 1:(n-1)){
for (l in k:n){
print("***")
print(i)
print(k)
print(l)
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(bib)
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz, Alban Besnard and Mathews John Hopkins", title = "I don't remember", year = NA))
makeRelations(bib)
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = list("Yan Holtz", "Alban Besnard","Mathews John Hopkins"), title = "I don't remember", year = NA))
bib
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = c("Yan Holtz", "Alban Besnard","Mathews John Hopkins"), title = "I don't remember", year = NA))
bib
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz ; Alban Besnard ; Mathews John Hopkins", title = "I don't remember", year = NA))
bib
A <- ReadGS(scholar.id = "o8gYsiIAAAAJ",check.entries = FALSE)
A
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz, Alban Besnard, Mathews John Hopkins", title = "I don't remember", year = NA))
bib
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz, Alban Besnard, and Mathews John Hopkins", title = "I don't remember", year = NA))
bibentry()
??bibentry()
??BibEntry
?BibEntry
A@authors
A@author
A$author
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Mathews John Hopkins", title = "I don't remember", year = NA))
bib
makeRelations(bbi)
makeRelations(bib)
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard and Mathews John Hopkins", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
makeRelations(bib)
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
for (k in 1:(n-1)){
for (l in k:n){
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(bib)
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
#
library(rmiscalb)
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
makeRelations
bib
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
for (k in 1:(n-1)){
for (l in k:n){
print("***")
print(i)
print(k)
print(l)
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(A)
author_list <- A[26]$author
length(author_list)
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
# check if there is only one author then skip
if (n == 1) next
for (k in 1:(n-1)){
for (l in k+1:n){
print("***")
print(i)
print(k)
print(l)
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(bib)
bib
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
# check if there is only one author then skip
if (n == 1) next
for (k in 1:(n-1)){
for (l in (k+1):n){
print("***")
print(i)
print(k)
print(l)
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
makeRelations(bib)
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
makeRelations(bib)
test_that("makeRelations base is working",{
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz" "A. Besnard"), target = c("Y. Holtz",
"M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = 1:3, class = "data.frame")
expect_equal(makeRelations(bib),expected_result)
})
library(rmiscalb)
test_that("makeRelations base is working",{
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz" "A. Besnard"), target = c("Y. Holtz",
"M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = 1:3, class = "data.frame")
expect_equal(makeRelations(bib),expected_result)
})
makeRelations()
makeRelations
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
# check if there is only one author then skip
if (n == 1) next
for (k in 1:(n-1)){
for (l in (k+1):n){
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
test_that("makeRelations base is working",{
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz" "A. Besnard"), target = c("Y. Holtz",
"M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = 1:3, class = "data.frame")
expect_equal(makeRelations(bib),expected_result)
})
makeRelations(bib)
dput(makeRelations(bib))
test_that("makeRelations base is working",{
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz" "A. Besnard"), target = c("Y. Holtz",
"M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = c(NA,3L), class = "data.frame")
expect_equal(makeRelations(bib),expected_result)
})
test_that("makeRelations base is working",{
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz" "A. Besnard"), target = c("Y. Holtz", "M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = c(NA,3L), class = "data.frame")
expect_equal(makeRelations(bib),expected_result)
})
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz" "A. Besnard"), target = c("Y. Holtz", "M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = c(NA,3L), class = "data.frame")
test_that("makeRelations base is working",{
bib <- c(BibEntry(bibtype = "misc", key = "test1", author = "Alban Besnard and Yan Holtz", title = "It's another great day", year = "2019"),
BibEntry(bibtype = "misc", key = "test2", author = "Alban Besnard", title = "A good collaboration", year = "2018"),
BibEntry(bibtype = "misc", key ="test3", author = "Yan Holtz and Alban Besnard and Marylin Phillips", title = "I don't remember", year = NA))
expected_result <- structure(list(source = c("A. Besnard", "Y. Holtz", "A. Besnard"), target = c("Y. Holtz", "M. Phillips", "M. Phillips"), Value = c(2, 1, 1)), row.names = c(NA,3L), class = "data.frame")
expect_equal(makeRelations(bib),expected_result)
})
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
# it may be a good idea to keep only links with only a minimum amount.
biblio <- biblio %>% filter(Value > 1)
# création des group d'individus
vertices<- makeVertices(biblio)
# on ajoute les index des auteurs pour un trac? plus simple du network
biblio<- updateRelations(biblio,vertices)
# sophisticated network graph
d3 = forceNetwork(Links = biblio, Nodes = vertices,
Source = "source.index", Target = "target.index",
Nodesize="freq",
NodeID = "name",
Value="Value",
Group = "group", # color nodes by betweeness calculated earlier
charge = -70, # node repulsion
linkDistance = 25,
fontSize = 14,
zoom = T)
# If you want to show the graph
show(d3)
View(A)
# it may be a good idea to keep only links with only a minimum amount.
biblio <- biblio %>% filter(Value > 3)
# création des group d'individus
vertices<- makeVertices(biblio)
# on ajoute les index des auteurs pour un trac? plus simple du network
biblio<- updateRelations(biblio,vertices)
# sophisticated network graph
d3 = forceNetwork(Links = biblio, Nodes = vertices,
Source = "source.index", Target = "target.index",
Nodesize="freq",
NodeID = "name",
Value="Value",
Group = "group", # color nodes by betweeness calculated earlier
charge = -70, # node repulsion
linkDistance = 25,
fontSize = 14,
zoom = T)
# If you want to show the graph
show(d3)
# manière numéro 1 utiliser un fichier .bib
A <- ReadBib(file ="fusa_ble.bib", .Encoding ="UTF-8")
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
# it may be a good idea to keep only links with only a minimum amount.
biblio <- biblio %>% filter(Value > 1)
# création des group d'individus
vertices<- makeVertices(biblio)
document()
A <- ReadCrossRef(query="mycolactone",limit=200)
data.frame(A) %>%
ggplot(aes(x=as.factor(year)))+ geom_bar()
data.frame(A)
A$year
A$date
#
library(rmiscalb)
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
makeRelations
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
bibtex=A
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
# check if there is only one author then skip
if (n == 1) next
for (k in 1:(n-1)){
for (l in (k+1):n){
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
print("***")
print(i)
print(k)
print(l)
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
makeRelations<- function(bibtex){
relations <- data.frame(source = character(),target = character(), Value = numeric(),stringsAsFactors=FALSE)
for (i  in 1:length(bibtex)) {
author_list<-(bibtex[i]$author)
n=length(author_list)
# check if there is only one author then skip
if (n == 1 | n == 0) next
for (k in 1:(n-1)){
for (l in (k+1):n){
# on ne s'arrête que si les deux noms sont différents.
if (k != l) {
print("***")
print(i)
print(k)
print(l)
a=extractName(author_list,k);b=extractName(author_list,l)
if (paste(a,b) %in% c(paste(relations$source,relations$target),paste(relations$target,relations$source))) {
# a big distusting expression to add 1 to the Value parameter
relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)]<- relations$Value[paste(relations$source,relations$target) %in% paste(a,b) |paste(relations$target,relations$source) %in% paste(a,b)] +1
} else {
relations[nrow(relations)+1,] <- list(a,b,1)
}
}
}
}
# on parcourt les noms d'auteurs
}
return(relations)
}
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
# it may be a good idea to keep only links with only a minimum amount.
biblio <- biblio %>% filter(Value > 1)
# création des group d'individus
vertices<- makeVertices(biblio)
# on ajoute les index des auteurs pour un trac? plus simple du network
biblio<- updateRelations(biblio,vertices)
# sophisticated network graph
d3 = forceNetwork(Links = biblio, Nodes = vertices,
Source = "source.index", Target = "target.index",
Nodesize="freq",
NodeID = "name",
Value="Value",
Group = "group", # color nodes by betweeness calculated earlier
charge = -70, # node repulsion
linkDistance = 25,
fontSize = 14,
zoom = T)
# If you want to show the graph
show(d3)
author_list<-(bibtex[25]$author)
k=1
author_list[k]
unlist(author_list[k], use.names = TRUE)
unlist(author_list[k])
paste0(unlist(author_list[k], use.names = TRUE))
paste0(unlist(author_list[k])
)
author_list[k]
test <- author_list[k]
test
author_list[k]$given
author_list[k]$family
paste0(author_list[k]$given,author_list[k]$family)
c(author_list[k]$given,author_list[k]$family)
k=2
c(author_list[k]$given,author_list[k]$family)
devtools::test()
# extraction des bibtex vers biblio
biblio<- makeRelations(A)
# it may be a good idea to keep only links with only a minimum amount.
biblio <- biblio %>% filter(Value > 1)
# création des group d'individus
vertices<- makeVertices(biblio)
# on ajoute les index des auteurs pour un trac? plus simple du network
biblio<- updateRelations(biblio,vertices)
# sophisticated network graph
d3 = forceNetwork(Links = biblio, Nodes = vertices,
Source = "source.index", Target = "target.index",
Nodesize="freq",
NodeID = "name",
Value="Value",
Group = "group", # color nodes by betweeness calculated earlier
charge = -70, # node repulsion
linkDistance = 25,
fontSize = 14,
zoom = T)
# If you want to show the graph
show(d3)
